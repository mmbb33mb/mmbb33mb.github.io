@charset "utf-8";

/*----------------------------------------
  Selector 書き方
----------------------------------------*/
.sample-width {
	@include column-width(220px);
	@include make-gradient(#fff, #000, vertical);
}

.sample-ghost {
	@include make-ghost-button(#34dec6, 4px, 300ms, #000000 );
}

.circle {
	@include circle();
	@include vertical-align();
	&:hover {
		@include yPos(20px);
		@include transition(1s);
	}
}

.sample-box-shadow {
	@include box-shadow(10px, 10px);
}

.sample-background {
	@include background("quote(../img/sample.jpg), no-repeat center top");
	@include background-position("right, bottom");
	@include border("2px, solid, black");
}

ul {
	@include padding(10px);
	@include margin-bottom(10px);
	@include border(2px solid pink);
	@include background-color(#fff);

	&[class^=num] li {
		@include padding(0.2em 0.5em);
		@include font-size(1.2rem);
		@include line-height(1.6);
		@include color(#fff);

		&:nth-child(even) {
			@include background-color(#0CC);
		}
		&:nth-child(odd) {
			@include background-color(orange);
		}
	}

	&.num3 li {
		&:nth-child(even) {
			@include background-color(green);
		}
		&:nth-child(odd) {
			@include background-color(pink);
		}
	}

	@for $i from 1 through 4 {
		&.num#{$i}::after {
			@include content("::afterで追加したテキスト#{$i}");
		}
	}

	& li:hover {
		@include background-color(green);
	}
}

/*----------------------------------------
	for文で繰り返し
----------------------------------------*/
/* 通常 */
@for $i from 1 through 5 {
	.item#{$i} {
		@include background-image(url(images/test#{$i}));
	}
}

/*----------------------------------------
	グラデーション
----------------------------------------*/
p#gradient {
	@include background("linear-gradient(left, #f9e600 5%, #6f156c 35%, #fd7c00 65%, #002874 95%)");
	@include height(200px);
	@include line-height(200px);
	@include text-align(center);
	@include font-size(2.3rem);
	@include color(#fff);
}

/*----------------------------------------
	extend 出力するcssを分けている場合は
	他のcssに大してはextend出来ないみたいです。
----------------------------------------*/
p.common {
	@include margin(0);
	@include padding(0);
}

.test {
	@extend p.common;
	@extend .clearfix::after;
}

/*----------------------------------------
	font-size pxを%に変換
----------------------------------------*/
.test {
	@include font-size(1.2rem);
}
.test {
	@include font-size(3rem);
}
/* 8以下は8になるよ */
.test {
	@include font-size(0.1rem);
}
/* 40以上は40になるよ */
.test {
	@include font-size(10rem);
}

/*----------------------------------------
	calc-font-size(目的のサイズ,継承したサイズ)
	小数点以下は3桁
----------------------------------------*/
// 13を基準に、15のemを計算
.test {
	@include font-size(calc-font-size(1.5rem,1.3rem));
}
// 13を基準に、15の%を計算
.test {
	@include font-size(calc-font-size(1.5rem,1.3rem,'%'));
}

/*----------------------------------------
	css3
----------------------------------------*/
.test {
	@include height(100px);
	@include background(red);
	@include text-align(center);

	/* 関数で 値を指定 */
	@include font-family($base-font-family);
	@include width($base-width);

	// IE Hack
	/* opacity */
	@include opacity(0.8);

	/* min-height */
	@include min-height(100px);

	/* inline-block */
	@include inline-block();


	/* box-sizing */
	@include box-sizing(border-box);

	/* border-radius */
	@include border-radius(100px);

	/* background-size */
	@include background-size(contain);

	/* box-shadow */
	@include box-shadow(
						1px 1px 3px rgba(blue,1),
						1px 1px 3px rgba(blue, 1),
						1px 1px 3px rgba(blue, 1)
						);

	/* text-shadow */
	@include text-shadow(
						rgba(blue, 0.2) 1px 1px 0,
						rgba(blue, 0.2) 2px 2px 0,
						rgba(blue, 0.2) 3px 3px 0
						);

	/* 同じtext-shadowを繰り返したい場合 */
	// text-shadow-repeat(5px 0 10px rgba(0, 0, 0, 0.3),繰り返したい数);
	@include make-text-shadow-repeat(0 0 2px rgba(255, 255, 255, 1),15);

	/* transition */
	@include transition(margin-left 0.25s ease-out,padding 0.25s ease-out);
	@include transition(all 0.25s ease-out);

	/* transition単品で transformを指定した場合ベンダーフィックスがつかない */
	@include transition(transform 0.25s ease-out);

	/* 単独だとつきます */
	@include transition-property(transform);
	@include transition-duration(0.5s);
	@include transition-delay(0.1s);
	@include transition-timing-function(ease-in);

	/* transform βのようです。 */
	// firefoxだとperspectiveの数値にpxが付いていないとダメのようです。
	// なのでこのまま使うとダメですね・・。compass バージョンアップに期待、もしくはmixinを少しいじる必要がありますね。
	//１つだけの場合はtransformを使い、副す書きたい場合はcreate-transformを使わないとダメなのかな？
	@include transform(rotate(720deg));

	// create-transform($perspective, $scale-x, $scale-y, $scale-z, $rotate-x, $rotate-y, $rotate-z, $rotate3d, $trans-x, $trans-y, $trans-z, $skew-x, $skew-y, $origin-x, $origin-y, $origin-z, $only3d);
	// @include create-transform(
								// //$perspective
								// 800px,
								// //$scale-x
								// false,
								// //$scale-y
								// false,
								// //$scale-z
								// false,
								// //$rotate-x
								// false,
								// //$rotate-y
								// false,
								// //$rotate-z
								// false,
								// //$rotate3d
								// (1,5,5,10deg),
								// //$trans-x
								// false,
								// //$trans-y
								// false,
								// //$trans-z
								// false,
								// //$skew-x
								// false,
								// //$skew-y
								// false,
								// //$origin-x
								// false,
								// //$origin-y
								// false,
								// //$origin-z
								// false,
								// //$only3d
								// false
							// );

	&:hover {
		// @include create-transform(
									// //$perspective
									// false,
									// //$scale-x
									// false,
									// //$scale-y
									// false,
									// //$scale-z
									// false,
									// //$rotate-x
									// false,
									// //$rotate-y
									// false,
									// //$rotate-z
									// false,
									// //$rotate3d
									// (3,40,-200,10deg),
									// //$trans-x
									// false,
									// //$trans-y
									// false,
									// //$trans-z
									// false,
									// //$skew-x
									// false,
									// //$skew-y
									// false,
									// //$origin-x
									// false,
									// //$origin-y
									// false,
									// //$origin-z
									// false,
									// //$only3d
									// false
								// );
	}
}

/*----------------------------------------
	MediaQuery
	そのなかのクラスにextendすることもできみたい。
----------------------------------------*/
.media {
	@include width(320px);
	@extend .media2
}

.media2 {
	@media screen and (max-width: 479px) {
		@include width(320px);
	}

	@media screen and (min-width: 480px) {
		@include width(480px);
	}

	// 値がない場合は書き出されない
	@media screen and (min-width: 680px) {
	}
}

/*----------------------------------------
	アニメーション
----------------------------------------*/
p.test2:hover {
	@include animation-name(anime1);
	@include animation-duration(5s);
	@include animation-timing-function(ease);
	@include animation-iteration-count(infinite);
}

/* keyframe */
@include keyframes(anime1) {
	0% {
		@include transform(rotate(720deg));
	}
	100% {
		@include width(500px);
		@include transform(rotate(0deg));
	}
}

/*----------------------------------------
	sassの機能
----------------------------------------*/
.test2 {
	@include text-align(center);
	@include display(table-cell);
	@include vertical-align(middle);
	@include font-size(3rem);
	@include letter-spacing(-0.1em);

	// 色まぜまぜ
	@include background-color(mix(red , blue ,50%));
	@include color(mix(red , yellow ,50%));

	// %の計算
	@include width(percentage(100px / 300px));

	// 四捨五入
	@include width(round(percentage(100px / 300px)));
	//くり上げ
	@include width(ceil(percentage(100px / 300px)));
	// 切り捨て
	@include width(floor(percentage(100px / 300px)));
	// 絶対値
	@include width(abs(-300px));
	// 値の型の取得
	@include transition-property(type-of(#fff));

	// 値の単位の取得
	$testNum:100px;
	@include height(300#{unit($testNum)});
}
